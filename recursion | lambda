{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Welcome To Colaboratory",
      "provenance": [],
      "collapsed_sections": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/joekadam/Data-Cleanup/blob/master/recursion%20%7C%20lambda\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "e-edY_0RePv_",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "outputId": "3ae04f64-1346-4f1a-d76b-320add00748b"
      },
      "source": [
        "homes = [('home1', 1000, 1), ('home2', 7700, 9), ('home3', 6000, 10)]\n",
        "sorted(homes, key=lambda home: home[1]*home[2], reverse=True) # by square footage"
      ],
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[('home2', 7700, 9), ('home3', 6000, 10), ('home1', 1000, 1)]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "enkNMnPfEcHb",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 863
        },
        "outputId": "f29bee7b-bf2c-46cb-fdb2-733b09ba89da"
      },
      "source": [
        "#########################\n",
        "## EXAMPLE: returning a tuple\n",
        "#########################\n",
        "def quotient_and_remainder(x, y):\n",
        "    q = x // y\n",
        "    r = x % y\n",
        "    return (q, r)\n",
        "    \n",
        "(quot, rem) = quotient_and_remainder(5,3)\n",
        "print(quot)\n",
        "print(rem)\n",
        "\n",
        "\n",
        "#########################\n",
        "## EXAMPLE: iterating over tuples\n",
        "#########################\n",
        "def get_data(aTuple):\n",
        "    \"\"\"\n",
        "    aTuple, tuple of tuples (int, string)\n",
        "    Extracts all integers from aTuple and sets \n",
        "    them as elements in a new tuple. \n",
        "    Extracts all unique strings from from aTuple \n",
        "    and sets them as elements in a new tuple.\n",
        "    Returns a tuple of the minimum integer, the\n",
        "    maximum integer, and the number of unique strings\n",
        "    \"\"\"\n",
        "    nums = ()    # empty tuple\n",
        "    words = ()\n",
        "    for t in aTuple:\n",
        "        # concatenating with a singleton tuple\n",
        "        nums = nums + (t[0],)   \n",
        "        # only add words haven't added before\n",
        "        if t[1] not in words:   \n",
        "            words = words + (t[1],)\n",
        "    min_n = min(nums)\n",
        "    max_n = max(nums)\n",
        "    unique_words = len(words)\n",
        "    return (min_n, max_n, unique_words)\n",
        "\n",
        "test = ((1,\"a\"),(2, \"b\"),\n",
        "        (1,\"a\"),(7,\"b\"))\n",
        "(a, b, c) = get_data(test)\n",
        "print(\"a:\",a,\"b:\",b,\"c:\",c)\n",
        "\n",
        "# apply to any data you want!\n",
        "tswift = ((2014,\"Katy\"),\n",
        "          (2014, \"Harry\"),\n",
        "          (2012,\"Jake\"), \n",
        "          (2010,\"Taylor\"), \n",
        "          (2008,\"Joe\"))    \n",
        "(min_year, max_year, num_people) = get_data(tswift)\n",
        "print(\"From\", min_year, \"to\", max_year, \\\n",
        "        \"Taylor Swift wrote songs about\", num_people, \"people!\")\n",
        "\n",
        "#########################\n",
        "## EXAMPLE: sum of elements in a list\n",
        "#########################\n",
        "def sum_elem_method1(L):\n",
        "  total = 0 \n",
        "  for i in range(len(L)): \n",
        "      total += L[i] \n",
        "  return total\n",
        "  \n",
        "def sum_elem_method2(L):\n",
        "    total = 0 \n",
        "    for i in L: \n",
        "        total += i \n",
        "    return total\n",
        "  \n",
        "print(sum_elem_method1([1,2,3,4]))\n",
        "print(sum_elem_method2([1,2,3,4]))\n",
        "\n",
        "\n",
        "#########################\n",
        "## EXAMPLE: various list operations\n",
        "## put print(L) at different locations to see how it gets mutated\n",
        "#########################\n",
        "L1 = [2,1,3]\n",
        "L2 = [4,5,6]\n",
        "L3 = L1 + L2\n",
        "L1.extend([0,6])\n",
        "\n",
        "L = [2,1,3,6,3,7,0]\n",
        "L.remove(2)\n",
        "L.remove(3)\n",
        "del(L[1])\n",
        "print(L.pop())\n",
        "\n",
        "s = \"I<3 cs\"\n",
        "print(list(s))\n",
        "print(s.split('<'))\n",
        "L = ['a', 'b', 'c']\n",
        "print(''.join(L))\n",
        "print('_'.join(L))\n",
        "\n",
        "L=[9,6,0,3]\n",
        "print(sorted(L))\n",
        "L.sort()\n",
        "L.reverse()\n",
        "\n",
        "\n",
        "#########################\n",
        "## EXAMPLE: aliasing\n",
        "#########################\n",
        "a = 1\n",
        "b = a\n",
        "print(a)\n",
        "print(b)\n",
        "\n",
        "warm = ['red', 'yellow', 'orange']\n",
        "hot = warm\n",
        "hot.append('pink')\n",
        "print(hot)\n",
        "print(warm)\n",
        "\n",
        "#########################\n",
        "## EXAMPLE: cloning\n",
        "#########################\n",
        "cool = ['blue', 'green', 'grey']\n",
        "chill = cool[:]\n",
        "chill.append('black')\n",
        "print(chill)\n",
        "print(cool)\n",
        "\n",
        "#########################\n",
        "## EXAMPLE: sorting with/without mutation\n",
        "#########################\n",
        "warm = ['red', 'yellow', 'orange']\n",
        "sortedwarm = warm.sort()\n",
        "print(warm)\n",
        "print(sortedwarm)\n",
        "\n",
        "cool = ['grey', 'green', 'blue']\n",
        "sortedcool = sorted(cool)\n",
        "print(cool)\n",
        "print(sortedcool)\n",
        "\n",
        "#########################\n",
        "## EXAMPLE: lists of lists of lists...\n",
        "#########################\n",
        "warm = ['yellow', 'orange']\n",
        "hot = ['red']\n",
        "brightcolors = [warm]\n",
        "brightcolors.append(hot)\n",
        "print(brightcolors)\n",
        "hot.append('pink')\n",
        "print(hot)\n",
        "print(brightcolors)\n",
        "\n",
        "\n",
        "###############################\n",
        "## EXAMPLE: mutating a list while iterating over it\n",
        "###############################\n",
        "def remove_dups(L1, L2):\n",
        "    for e in L1:\n",
        "        if e in L2:\n",
        "            L1.remove(e)\n",
        "      \n",
        "def remove_dups_new(L1, L2):\n",
        "    L1_copy = L1[:]\n",
        "    for e in L1_copy:\n",
        "        if e in L2:\n",
        "            L1.remove(e)\n",
        "\n",
        "L1 = [1, 2, 3, 4]\n",
        "L2 = [1, 2, 5, 6]\n",
        "remove_dups(L1, L2)\n",
        "print(L1, L2)\n",
        "\n",
        "L1 = [1, 2, 3, 4]\n",
        "L2 = [1, 2, 5, 6]\n",
        "remove_dups_new(L1, L2)\n",
        "print(L1, L2)\n",
        "\n",
        "###############################\n",
        "## EXERCISE: Test yourself by predicting what the output is and \n",
        "##           what gets mutated then check with the Python Tutor\n",
        "###############################\n",
        "cool = ['blue', 'green']\n",
        "warm = ['red', 'yellow', 'orange']\n",
        "print(cool)\n",
        "print(warm)\n",
        "\n",
        "colors1 = [cool]\n",
        "print(colors1)\n",
        "colors1.append(warm)\n",
        "print('colors1 = ', colors1)\n",
        "\n",
        "colors2 = [['blue', 'green'],\n",
        "          ['red', 'yellow', 'orange']]\n",
        "print('colors2 =', colors2)\n",
        "\n",
        "warm.remove('red') \n",
        "print('colors1 = ', colors1)\n",
        "print('colors2 =', colors2)\n",
        "\n",
        "for e in colors1:\n",
        "    print('e =', e)\n",
        "\n",
        "for e in colors1:\n",
        "    if type(e) == list:\n",
        "        for e1 in e:\n",
        "            print(e1)\n",
        "    else:\n",
        "        print(e)\n",
        "\n",
        "flat = cool + warm\n",
        "print('flat =', flat)\n",
        "\n",
        "print(flat.sort())\n",
        "print('flat =', flat)\n",
        "\n",
        "new_flat = sorted(flat, reverse = True)\n",
        "print('flat =', flat)\n",
        "print('new_flat =', new_flat)\n",
        "\n",
        "cool[1] = 'black'\n",
        "print(cool)\n",
        "print(colors1)"
      ],
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "1\n",
            "2\n",
            "a: 1 b: 7 c: 2\n",
            "From 2008 to 2014 Taylor Swift wrote songs about 5 people!\n",
            "10\n",
            "10\n",
            "0\n",
            "['I', '<', '3', ' ', 'c', 's']\n",
            "['I', '3 cs']\n",
            "abc\n",
            "a_b_c\n",
            "[0, 3, 6, 9]\n",
            "1\n",
            "1\n",
            "['red', 'yellow', 'orange', 'pink']\n",
            "['red', 'yellow', 'orange', 'pink']\n",
            "['blue', 'green', 'grey', 'black']\n",
            "['blue', 'green', 'grey']\n",
            "['orange', 'red', 'yellow']\n",
            "None\n",
            "['grey', 'green', 'blue']\n",
            "['blue', 'green', 'grey']\n",
            "[['yellow', 'orange'], ['red']]\n",
            "['red', 'pink']\n",
            "[['yellow', 'orange'], ['red', 'pink']]\n",
            "[2, 3, 4] [1, 2, 5, 6]\n",
            "[3, 4] [1, 2, 5, 6]\n",
            "['blue', 'green']\n",
            "['red', 'yellow', 'orange']\n",
            "[['blue', 'green']]\n",
            "colors1 =  [['blue', 'green'], ['red', 'yellow', 'orange']]\n",
            "colors2 = [['blue', 'green'], ['red', 'yellow', 'orange']]\n",
            "colors1 =  [['blue', 'green'], ['yellow', 'orange']]\n",
            "colors2 = [['blue', 'green'], ['red', 'yellow', 'orange']]\n",
            "e = ['blue', 'green']\n",
            "e = ['yellow', 'orange']\n",
            "blue\n",
            "green\n",
            "yellow\n",
            "orange\n",
            "flat = ['blue', 'green', 'yellow', 'orange']\n",
            "None\n",
            "flat = ['blue', 'green', 'orange', 'yellow']\n",
            "flat = ['blue', 'green', 'orange', 'yellow']\n",
            "new_flat = ['yellow', 'orange', 'green', 'blue']\n",
            "['blue', 'black']\n",
            "[['blue', 'black'], ['yellow', 'orange']]\n"
          ],
          "name": "stdout"
        }
      ]
    }
  ]
}